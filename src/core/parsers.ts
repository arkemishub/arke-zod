import type { TStruct, TUnit } from "@arkejs/client";
import camelCase from "lodash.camelcase";
import type { Parameter } from "../utils/temp-types";

const MIN_MAX_BLACKLIST = ["arke_id"];

export async function parseStructToSchema(arke: TUnit, struct: TStruct) {
	const parameters = struct.parameters.filter(
		(param) => param.type !== "dynamic",
	) as Parameter[];

	const schemaStr = buildSchemaString(arke, parameters);
	const typeStr = buildTypeString(arke);

	return `// This file is auto-generated by arke-zod, do not edit it manually\n
            import { z } from "zod";\n
            ${schemaStr}\n
            ${typeStr}
            `;
}

function buildSchemaString(arke: TUnit, parameters: Parameter[]) {
	const schemaName = getSchemaName(arke);

	const schemaContent = parameters
		.map((param) => {
			const zodStr = [
				parseType(param),
				parseRequired(param),
				parseMinMax(param),
			].join("");
			return `${param.id}: ${zodStr},`;
		})
		.join("\n");

	return `export const ${schemaName} = z.object({
        ${schemaContent}
    });`;
}

function getSchemaName(arke: TUnit) {
	return `${camelCase(arke.id)}Schema`;
}

function buildTypeString(arke: TUnit) {
	const typeName =
		camelCase(arke.id).charAt(0).toUpperCase() + camelCase(arke.id).slice(1);
	return `export type ${typeName} = z.infer<typeof ${getSchemaName(arke)}>;`;
}

function parseType(parameter: Parameter) {
	switch (parameter.type) {
		case "datetime":
			return "z.string().datetime()";
		case "date":
			return "z.string().date()";
		case "dict":
			return "z.record(z.string(), z.unknown())";
		case "link":
		case "string":
			return "z.string()";
		case "float":
			return "z.number()";
		case "integer":
			return "z.number().int()";
		default:
			throw new Error(`Unknown type: ${parameter.type}`);
	}
}

function parseRequired(parameter: Parameter) {
	if (!parameter.required) return ".optional()";
	return "";
}

function parseMinMax(parameter: Parameter) {
	if (MIN_MAX_BLACKLIST.includes(parameter.id)) return "";

	let result = "";

	if (parameter.type === "string") {
		if (parameter.min_length) result += `.min(${parameter.min_length})`;
		if (parameter.max_length) result += `.max(${parameter.max_length})`;
	} else if (parameter.type === "integer" || parameter.type === "float") {
		if (parameter.min) result += `.gte(${parameter.min})`;
		if (parameter.max) result += `.lte(${parameter.max})`;
	}

	return result;
}
